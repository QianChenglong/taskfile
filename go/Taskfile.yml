version: "3"

env:
  CGO_ENABLED: 0

vars:
  GO_VERSION: 1.22.2
  DOCKER_DIR: '{{default "_docker" .DOCKER_DIR}}' # 可选
  OUTPUT_DIR: '{{default "_output" .OUTPUT_DIR}}' # 可选
  VERSION_PACKAGE: "{{.VERSION_PACKAGE}}"
  HOSTNAME:
    sh: hostname
  LDFLAGS: >-
    -s -w -buildid=
    {{if .VERSION_PACKAGE}}
    -X {{.VERSION_PACKAGE}}.GitVersion={{.VERSION}}
    -X {{.VERSION_PACKAGE}}.GitCommit={{.GIT_COMMIT}}
    -X {{.VERSION_PACKAGE}}.GitTreeState={{.GIT_TREE_STATE}}
    -X {{.VERSION_PACKAGE}}.BuildDate={{.GIT_BUILD_DATE}}
    -X {{.VERSION_PACKAGE}}.BuildUser={{.USER}}
    -X {{.VERSION_PACKAGE}}.BuildHost={{.HOSTNAME}}
    -X {{.VERSION_PACKAGE}}.BuildJobURL={{.QCI_JOB_URL}}
    {{end}}

tasks:
  check:
    desc: "检查"
    silent: true
    vars:
      CURRENT_GO_VERSION:
        sh: go version | awk '{print $3}' | sed 's/go//'
      CURRENT_GO_MOD_VERSION:
        sh: grep '^go ' go.mod | sed 's/go //'

    cmds:
      - >
        if [ "{{.CURRENT_GO_VERSION}}" != "{{.GO_VERSION}}" ]; then
          echo "当前go版本 {{.CURRENT_GO_VERSION}} 不满足期望版本 {{.GO_VERSION}}"
          exit 1
        fi
      - >
        if [ "{{.CURRENT_GO_MOD_VERSION}}" != "{{.GO_VERSION}}" ]; then
          echo "当前go.mod go版本 {{.CURRENT_GO_MOD_VERSION}} 不满足期望版本 {{.GO_VERSION}}"
          exit 1
        fi
      - go mod tidy
      - >
        if git status -s | grep -E 'go(.mod)|go(.sum)' ; then
          echo 'Error: must run `go mod tidy` before commit!';
          exit 1;
        fi
      - task: lint

  lint:
    desc: "lint"
    cmds:
    - golangci-lint run

  build:
    desc: "构建二进制"
    vars:
      OS: "{{default OS .OS}}"
      ARCH: "{{default ARCH .ARCH}}"
      OUTPUT_DIR: "{{.OUTPUT_DIR}}/{{.OS}}/{{.ARCH}}/"
      PACKAGE: '{{default "." .PACKAGE}}'
      LDFAGS: "{{.LDFLAGS}}"
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - GOOS={{.OS}} GOARCH={{.ARCH}} go build -o {{.OUTPUT_DIR}} {{if .LDFLAGS}} -ldflags "{{.LDFLAGS}}"{{end}} {{.PACKAGE}}

  test:
    desc: "测试"
    vars:
      TIMEOUT: '{{default "10m" .TIMEOUT}}'
      PACKAGE: '{{default "./..." .PACKAGE}}'
      FLAGS: '{{default "-short -v" .PACKAGE}}'
    cmds:
      - go test -timeout={{.TIMEOUT}} {{.FLAGS}} ./...

  clean:
    desc: "清理本地构建输出"
    cmds:
      - rm -rfv {{.OUTPUT_DIR}}
